Table: Products

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| product_id    | int     |
| new_price     | int     |
| change_date   | date    |
+---------------+---------+
(product_id, change_date) is the primary key of this table.
Each row of this table indicates that the price of some product was changed to a new price at some date.
 

Write an SQL query to find the prices of all products on 2019-08-16. Assume the price of all products before any change is 10.

Return the result table in any order.

The query result format is in the following example.

 

Example 1:

Input: 
Products table:
+------------+-----------+-------------+
| product_id | new_price | change_date |
+------------+-----------+-------------+
| 1          | 20        | 2019-08-14  |
| 2          | 50        | 2019-08-14  |
| 1          | 30        | 2019-08-15  |
| 1          | 35        | 2019-08-16  |
| 2          | 65        | 2019-08-17  |
| 3          | 20        | 2019-08-18  |
+------------+-----------+-------------+
Output: 
+------------+-------+
| product_id | price |
+------------+-------+
| 2          | 50    |
| 1          | 35    |
| 3          | 10    |
+------------+-------+




# Write your MySQL query statement below
with base_table as (
    select *, rank() over(partition by product_id order by change_date desc) as ranking
    from products
    where change_date <= '2019-08-16'
    )

select A.product_id, isnull(new_price, 10) as price
from (select distinct product_id from products) A 
left join (select * from base_table where ranking = 1) B on A.product_id = B.product_id



with cte as
(
select product_id,new_price as price, dense_rank() over(partition by product_id order by change_date desc) as rnk
from products where change_date <='2019-08-16'
)
select distinct p.product_id, coalesce(c.price,10) as price from products p left outer join 
cte c on p.product_id = c.product_id
and c.rnk = 1;

-- price, product_id
-- change_date = '2019-08-16'
-- new_price != 10
-- by product_id
